#!/usr/bin/env python2.7

import  sys
import  matplotlib.pyplot as plt
import  numpy as np
from    math import *

def     checkArgs(argv):
    try:
        for i in range(1, len(sys.argv)):
            nb = float(argv[i])
            if nb < 0 or nb > 200:
                raise RuntimeError(argv[i] + ' incorrect. Les arguments doivent etre entre 0 et 200.')
    except ValueError:
        raise RuntimeError('Les arguments doivent etre des nombres.')
    return True

def     Distrib(x):
    if x == 0:
        return 0.5
    if x >= 7.56:
        return 1.0
    if x <= -7.56:
        return 0.0
    u = abs(x)
    n = int(u * 2000)
    du = u / n
    k = 1 / sqrt(2 * pi)
    u1 = 0
    f1 = k
    p = 0.5
    for i in range(0, n):
        u2 = u1 + du
        f2 = k * exp(-0.5 * u2 * u2)
        p = p + (f1 + f2) * du * 0.5
        u1 = u2
        f1 = f2
    if x > 0:
        return p
    return 1.0 - p

def     option(argv):
    result = list()
    esperance = float(argv[1])
    ecart_type = float(argv[2])
    for x in range(0, 200):
        result.append(Distrib((x - esperance) / ecart_type) * 100)
    plt.plot(result)
    plt.title("Probabilite (en %) en fonction du QI")
    plt.ylabel("probabilite (%)")
    plt.xlabel("QI")
    plt.show()
    
def     option2(argv):
    esperance = float(argv[1])
    ecart_type = float(argv[2])
    x = int(argv[3])
    result = Distrib((x - esperance) / ecart_type)
    print("%0.2f%% des personnes ont un QI inferieur a %d" % ((result * 100), x))

def     option3(argv):
    result = 0
    esperance = float(argv[1])
    ecart_type = float(argv[2])
    qi = int(argv[3])
    qi_2 = int(argv[4])
    result = (Distrib((qi_2 - esperance) / ecart_type)) - (Distrib((qi - esperance) / ecart_type))
    print("%0.2f%% des personnes ont un QI compris entre %d et %d" % (result * 100, qi, qi_2))

def     start(argv):
    options = {
        3 : option,
        4 : option2,
        5 : option3,
        }
    options[len(sys.argv)](sys.argv)

def     main():
    try:
        if len(sys.argv) < 3 or len(sys.argv) > 5:
            print("Usage: ./205QI <esperance> <ecart type> <qi> <qi_2>")
        else:
            if checkArgs(sys.argv) is True:
                start(sys.argv)
        return True
    except Exception as err:
        sys.stderr.write("ERROR: %s\nLe programme quitte.\n" % str(err))
        return False

if __name__ == '__main__':
    sys.exit(main())
